@using Silvestre.Pshychology.Tools.WISC3
@inject Microsoft.Extensions.Localization.IStringLocalizer<WISC3LookupTableVisualizer> Localization

<table class="table table-striped table-sm">
    <thead>
        <tr>
            <td class="invisible"></td>
            <td class="text-capitalize font-weight-bolder" colspan="6">@Localization["TableHeader.VerbalTests"]</td>
            <td class="text-capitalize font-weight-bolder" colspan="7">@Localization["TableHeader.RealizationTests"]</td>
        </tr>
        <tr>
            <td class="font-weight-bold">@Localization["TableHeader.StandardizedResults"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Information"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Similarities"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Arithmetic"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Vocabulary"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Comprehension"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.DigitMemory"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.ImageCompletion"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Code"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.ImageDisposition"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Cubes"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.ObjectComposition"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.SymbolSearch"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.Test.Labyrinth"]</td>
            <td class="font-weight-bold">@Localization["TableHeader.StandardizedResults"]</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var expectedResult in Enumerable.Range(1, 19))
        {
            <tr>
                <td class="font-weight-bold">@expectedResult</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Information, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Similarities, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Arithmetic, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Vocabulary, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Comprehension, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.DigitMemory, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.ImageCompletion, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Code, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.ImageDisposition, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Cubes, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.ObjectComposition, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.SymbolSearch, expectedResult)</td>
                <td>@DisplayPossibleValuesFor(Tools.WISC3.TestTypeEnum.Labyrinth, expectedResult)</td>
                <td class="font-weight-bold">@expectedResult</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private (Age From, Age To) _currentlyDisplayedInterval;

    [Parameter]
    public ITestStandardizer Standardizer { get; set; }

    [Parameter]
    public Age SubjectAge { get; set; }

    [Parameter]
    public IEnumerable<TestTypeEnum> DisplayedTests { get; set; } = new TestTypeEnum[]
    {
        TestTypeEnum.Information, TestTypeEnum.Similarities, TestTypeEnum.Arithmetic, TestTypeEnum.Vocabulary, TestTypeEnum.Comprehension, TestTypeEnum.DigitMemory,
        TestTypeEnum.ImageCompletion, TestTypeEnum.Code, TestTypeEnum.ImageDisposition, TestTypeEnum.Cubes, TestTypeEnum.ObjectComposition, TestTypeEnum.SymbolSearch, TestTypeEnum.Labyrinth
    };

    private IDictionary<TestTypeEnum, (int Start, int End)?[]> DeconstructedTestsInputs;

    protected override void OnInitialized()
    {
        this.DeconstructedTestsInputs = new System.Collections.Concurrent.ConcurrentDictionary<TestTypeEnum, (int Start, int End)?[]>();

        foreach (var testType in DisplayedTests)
        {
            var testDescriptor = Standardizer.GetTestDescriptorPerAge(testType, this.SubjectAge);

            if (testDescriptor == null) continue;

            var testOutputsByInput = new (int Start, int End)?[(testDescriptor.Boundaries.Max ?? testDescriptor.Boundaries.Min) - testDescriptor.Boundaries.Min + 1];
            for (short ix = testDescriptor.Boundaries.Min; ix <= testDescriptor.Boundaries.Max; ix++)
            {
                var testResult = Standardizer.Standerdization(testType, this.SubjectAge, ix);

                var testResultStanderdizedValue = testResult.Verbal ?? testResult.Realization;

                if (testResultStanderdizedValue == null) continue;

                if (testOutputsByInput[testResultStanderdizedValue.Value] == null)
                    testOutputsByInput[testResultStanderdizedValue.Value] = (Start: ix, End: ix);
                else if (testOutputsByInput[testResultStanderdizedValue.Value].HasValue)
                    testOutputsByInput[testResultStanderdizedValue.Value] = (Start: testOutputsByInput[testResultStanderdizedValue.Value].Value.Start, End: ix);
            }

            this.DeconstructedTestsInputs.Add(testType, testOutputsByInput);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private string DisplayPossibleValuesFor(TestTypeEnum testTypeEnum, int lookupValue)
    {
        var testDescriptor = Standardizer.GetTestDescriptorPerAge(testTypeEnum, this.SubjectAge);
        var possibleInputs = this.DeconstructedTestsInputs[testTypeEnum][lookupValue];

        if (possibleInputs == null)
            return string.Empty;
        else if (possibleInputs?.Start == possibleInputs?.End)
            return $"{possibleInputs?.Start}";
        else
            return $"{possibleInputs?.Start} - {possibleInputs?.End}";
    }
}
