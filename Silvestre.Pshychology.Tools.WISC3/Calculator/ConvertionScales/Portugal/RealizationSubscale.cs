using System.Collections.Generic;
using System.Linq;

namespace Silvestre.Pshychology.Tools.WISC3.Calculator.ConvertionScales.Portugal
{
    internal class RealizationSubscale : ConvertionScaleByLookup
    {
        private static readonly IDictionary<short, (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)> _lookupTable = new Dictionary<short, (short, decimal, (short, short), (short, short))>
        {
            { 5,  (46,  0m,     (45, 60),    (44, 61)) },
            { 6,  (47,  0m,     (46, 61),    (44, 62)) },
            { 7,  (48,  0m,     (47, 62),    (45, 63)) },
            { 8,  (49,  0m,     (48, 63),    (46, 64)) },
            { 9,  (50,  0m,     (48, 64),    (47, 65)) },
            { 10, (51,  0.1m,   (49, 64),    (48, 66)) },
            { 11, (52,  0.1m,   (50, 65),    (49, 67)) },
            { 12, (53,  0.1m,   (51, 66),    (50, 68)) },
            { 13, (54,  0.1m,   (52, 67),    (51, 68)) },
            { 14, (55,  0.1m,   (53, 68),    (51, 69)) },
            { 15, (56,  0.2m,   (54, 69),    (52, 70)) },
            { 16, (57,  0.2m,   (55, 70),    (53, 71)) },
            { 17, (58,  0.3m,   (56, 71),    (54, 72)) },
            { 18, (59,  0.3m,   (56, 71),    (55, 73)) },
            { 19, (60,  0.4m,   (57, 72),    (56, 74)) },
            { 20, (61,  0.5m,   (58, 73),    (57, 75)) },
            { 21, (62,  0.6m,   (59, 74),    (58, 76)) },
            { 22, (63,  0.7m,   (60, 75),    (58, 76)) },
            { 23, (64,  0.8m,   (61, 76),    (59, 77)) },
            { 24, (65,  1m,     (62, 77),    (60, 78)) },
            { 25, (66,  1m,     (63, 78),    (61, 79)) },
            { 26, (67,  1m,     (63, 79),    (62, 80)) },
            { 27, (68,  2m,     (64, 79),    (63, 81)) },
            { 28, (69,  2m,     (65, 80),    (64, 82)) },
            { 29, (70,  2m,     (66, 81),    (65, 83)) },
            { 30, (72,  3m,     (68, 83),    (66, 84)) },
            { 31, (73,  4m,     (69, 84),    (67, 85)) },
            { 32, (74,  4m,     (70, 85),    (68, 86)) },
            { 33, (75,  5m,     (70, 86),    (69, 87)) },
            { 34, (76,  6m,     (71, 86),    (70, 88)) },
            { 35, (77,  6m,     (72, 87),    (71, 89)) },
            { 36, (78,  7m,     (73, 88),    (72, 90)) },
            { 37, (79,  8m,     (74, 89),    (73, 90)) },
            { 38, (80,  9m,     (75, 90),    (73, 91)) },
            { 39, (82,  11m,    (77, 92),    (75, 93)) },
            { 40, (84,  14m,    (78, 93),    (77, 95)) },
            { 41, (86,  18m,    (80, 95),    (79, 97)) },
            { 42, (87,  19m,    (81, 96),    (80, 98)) },
            { 43, (89,  23m,    (83, 98),    (81, 99)) },
            { 44, (90,  25m,    (84, 99),    (82, 100)) },
            { 45, (92,  30m,    (85, 101),   (84, 102)) },
            { 46, (93,  32m,    (86, 101),   (85, 103)) },
            { 47, (95,  37m,    (88, 103),   (87, 105)) },
            { 48, (96,  39m,    (89, 104),   (88, 105)) },
            { 49, (98,  45m,    (91, 106),   (89, 107)) },
            { 50, (99,  47m,    (92, 107),   (90, 108)) },
            { 51, (101, 53m,    (93, 108),   (92, 110)) },
            { 52, (102, 55m,    (94, 109),   (93, 111)) },
            { 53, (103, 58m,    (95, 110),   (94, 112)) },
            { 54, (105, 63m,    (97, 112),   (95, 113)) },
            { 55, (106, 65m,    (98, 113),   (96, 114)) },
            { 56, (108, 70m,    (100, 115),  (98, 116)) },
            { 57, (109, 72m,    (100, 115),  (99, 117)) },
            { 58, (111, 77m,    (102, 117),  (101, 119)) },
            { 59, (112, 79m,    (103, 118),  (102, 120)) },
            { 60, (113, 81m,    (104, 119),  (102, 120)) },
            { 61, (115, 84m,    (106, 121),  (104, 122)) },
            { 62, (117, 87m,    (107, 123),  (106, 124)) },
            { 63, (116, 88m,    (108, 123),  (107, 125)) },
            { 64, (119, 90m,    (109, 124),  (108, 126)) },
            { 65, (121, 92m,    (111, 126),  (110, 127)) },
            { 66, (123, 94m,    (113, 128),  (111, 129)) },
            { 67, (124, 94m,    (114, 129),  (112, 130)) },
            { 68, (126, 96m,    (115, 130),  (114, 132)) },
            { 69, (128, 97m,    (117, 132),  (116, 134)) },
            { 70, (130, 98m,    (119, 134),  (117, 135)) },
            { 71, (132, 98m,    (121, 136),  (119, 137)) },
            { 72, (133, 99m,    (122, 137),  (120, 138)) },
            { 73, (135, 99m,    (123, 138),  (122, 140)) },
            { 74, (136, 99m,    (124, 139),  (123, 141)) },
            { 75, (137, 99.3m,  (125, 140),  (124, 142)) },
            { 76, (138, 99.4m,  (126, 141),  (124, 142)) },
            { 77, (139, 99.5m,  (127, 142),  (125, 143)) },
            { 78, (140, 99.6m,  (128, 143),  (126, 144)) },
            { 79, (141, 99.7m,  (129, 144),  (127, 145)) },
            { 80, (142, 99.7m,  (129, 145),  (128, 146)) },
            { 81, (143, 99.8m,  (130, 145),  (129, 147)) },
            { 82, (144, 99.8m,  (131, 146),  (130, 148)) },
            { 83, (145, 99.9m,  (132, 147),  (131, 149)) },
            { 84, (146, 99.9m,  (133, 148),  (132, 149)) },
            { 85, (147, 99.9m,  (134, 149),  (132, 150)) },
            { 86, (148, 99.9m,  (135, 150),  (133, 151)) },
            { 87, (149, 99.9m,  (136, 151),  (134, 152)) },
            { 88, (150, 100m,   (136, 152),  (135, 153)) },
            { 89, (151, 100m,   (137, 152),  (136, 154)) },
            { 90, (152, 100m,   (138, 153),  (137, 155)) },
            { 91, (153, 100m,   (139, 154),  (138, 156)) },
            { 92, (154, 100m,   (140, 155),  (139, 156)) },
            { 93, (155, 100m,   (141, 156),  (139, 157)) },
            { 94, (155, 100m,   (141, 156),  (139, 157)) },
            { 95, (155, 100m,   (141, 156),  (139, 157)) }
        };

        protected internal override IDictionary<short, (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)> LookupTable => _lookupTable;

        protected override (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)? OnResultOutOfBounds(short results)
        {
            var maxValue = this.LookupTable.Keys.Max();
            return this.LookupTable[maxValue];
        }
    }
}
