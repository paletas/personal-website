using System.Collections.Generic;
using System.Linq;

namespace Silvestre.Pshychology.Tools.WISC3.Calculator.ConvertionScales.Portugal
{
    internal class PerceptiveOrganizationSubscale : ConvertionScaleByLookup
    {
        private static readonly IDictionary<short, (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)> _lookupTable = new Dictionary<short, (short, decimal, (short, short), (short, short))>
        {
            { 4,  (50,  0m,     (49, 64),   (47, 66)) },
            { 5,  (51,  0.1m,   (50, 65),   (48, 67)) },
            { 6,  (52,  0.1m,   (50, 66),   (49, 67)) },
            { 7,  (53,  0.1m,   (51, 67),   (50, 68)) },
            { 8,  (54,  0.1m,   (52, 68),   (51, 69)) },
            { 9,  (55,  0.1m,   (53, 69),   (52, 70)) },
            { 10, (56,  0.2m,   (54, 70),   (53, 71)) },
            { 11, (57,  0.2m,   (55, 70),   (53, 72)) },
            { 12, (58,  0.3m,   (56, 71),   (54, 73)) },
            { 13, (59,  0.3m,   (57, 72),   (55, 74)) },
            { 14, (60,  0.4m,   (57, 73),   (56, 74)) },
            { 15, (61,  0.5m,   (58, 74),   (57, 75)) },
            { 16, (62,  0.6m,   (59, 75),   (58, 76)) },
            { 17, (63,  0.7m,   (60, 76),   (59, 77)) },
            { 18, (64,  0.8m,   (61, 76),   (59, 78)) },
            { 19, (66,  1m,     (63, 78),   (61, 80)) },
            { 20, (68,  2m,     (64, 80),   (63, 81)) },
            { 21, (69,  2m,     (65, 81),   (64, 82)) },
            { 22, (70,  2m,     (66, 82),   (65, 83)) },
            { 23, (72,  3m,     (68, 83),   (66, 85)) },
            { 24, (73,  4m,     (69, 84),   (67, 86)) },
            { 25, (74,  4m,     (70, 85),   (68, 84)) },
            { 26, (75,  5m,     (70, 86),   (69, 86)) },
            { 27, (77,  6m,     (72, 88),   (71, 89)) },
            { 28, (78,  7m,     (73, 89),   (72, 90)) },
            { 29, (81,  10m,    (76, 91),   (74, 93)) },
            { 30, (83,  13m,    (77, 93),   (76, 94)) },
            { 31, (84,  14m,    (78, 94),   (77, 95)) },
            { 32, (86,  18m,    (80, 96),   (79, 97)) },
            { 33, (88,  21m,    (82, 97),   (80, 99)) },
            { 34, (89,  23m,    (83, 98),   (81, 100)) },
            { 35, (91,  27m,    (84, 100),  (83, 101)) },
            { 36, (93,  32m,    (86, 102),  (85, 103)) },
            { 37, (94,  34m,    (87, 103),  (86, 104)) },
            { 38, (96,  39m,    (89, 104),  (87, 106)) },
            { 39, (98,  45m,    (90, 106),  (89, 107)) },
            { 40, (100, 50m,    (92, 108),  (92, 109)) },
            { 41, (101, 53m,    (93, 109),  (93, 110)) },
            { 42, (103, 58m,    (95, 110),  (95, 112)) },
            { 43, (104, 61m,    (96, 111),  (96, 113)) },
            { 44, (106, 65m,    (97, 113),  (97, 114)) },
            { 45, (107, 68m,    (98, 114),  (98, 115)) },
            { 46, (109, 72m,    (100, 116), (100, 117)) },
            { 47, (111, 77m,    (102, 117), (102, 119)) },
            { 48, (113, 81m,    (104, 119), (104, 121)) },
            { 49, (114, 82m,    (104, 120), (104, 121)) },
            { 50, (116, 86m,    (106, 122), (106, 123)) },
            { 51, (117, 87m,    (107, 123), (107, 124)) },
            { 52, (118, 88m,    (108, 123), (108, 125)) },
            { 53, (120, 91m,    (110, 125), (110, 127)) },
            { 54, (123, 94m,    (112, 128), (112, 129)) },
            { 55, (125, 95m,    (114, 130), (114, 131)) },
            { 56, (127, 96m,    (116, 131), (116, 133)) },
            { 57, (129, 97m,    (117, 133), (117, 134)) },
            { 58, (132, 98m,    (120, 136), (120, 137)) },
            { 59, (134, 99m,    (122, 137), (122, 139)) },
            { 60, (135, 99m,    (123, 138), (123, 140)) },
            { 61, (136, 99.2m,  (124, 139), (124, 141)) },
            { 62, (138, 99.4m,  (125, 141), (125, 142)) },
            { 63, (139, 99.5m,  (126, 142), (126, 143)) },
            { 64, (141, 99.7m,  (128, 143), (128, 145)) },
            { 65, (142, 99.7m,  (129, 144), (129, 146)) },
            { 66, (143, 99.8m,  (130, 145), (130, 147)) },
            { 67, (144, 99.8m,  (130, 146), (130, 147)) },
            { 68, (144, 99.8m,  (130, 146), (130, 147)) },
            { 69, (145, 99.9m,  (131, 147), (131, 148)) },
            { 70, (146, 99.9m,  (132, 148), (132, 149)) },
            { 71, (147, 99.9m,  (133, 149), (133, 150)) },
            { 72, (148, 99.9m,  (134, 150), (134, 151)) },
            { 73, (149, 99.9m,  (135, 150), (135, 152)) },
            { 74, (150, 100m,   (136, 151), (136, 153)) },
            { 75, (150, 100m,   (136, 151), (136, 153)) },
            { 76, (150, 100m,   (136, 151), (136, 153)) }
        };

        protected internal override IDictionary<short, (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)> LookupTable => _lookupTable;

        protected override (short QI, decimal Percentile, (short, short) Per90, (short, short) Per95)? OnResultOutOfBounds(short results)
        {
            var maxValue = this.LookupTable.Keys.Max();
            return this.LookupTable[maxValue];
        }
    }
}